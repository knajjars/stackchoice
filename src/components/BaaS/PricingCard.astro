---
import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import {
  formatValue,
  getOveragePricingUnit,
  getResourceUnit,
} from "~/lib/utils";

type Props = {
  baasProvider: CollectionEntry<"baasProvider">;
};

const { baasProvider } = Astro.props;
const pricing = baasProvider.data.pricing;
---

<div class="space-y-5">
  <div
    class="rounded-xl bg-white p-6 shadow-lg transition-all duration-300 hover:shadow-xl"
  >
    <p class="mb-8 text-lg italic text-gray-700">
      Dive into the world of Backend-as-a-Service pricing models and discover
      the perfect fit for your project!
    </p>
    <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
      <div
        class="rounded-lg bg-purple-200 p-4 shadow-md transition-all duration-300 hover:-translate-y-1 hover:shadow-lg"
      >
        <h4
          class="mb-2 flex items-center text-lg font-semibold text-purple-800"
        >
          <Icon name="mdi:gift" class="mr-2 h-5 w-5 text-purple-600" /> Free resources
        </h4>
        <p class="text-sm leading-relaxed text-purple-700">
          Kickstart your project with free resources each month.
        </p>
      </div>
      <div
        class="rounded-lg bg-amber-200 p-4 shadow-md transition-all duration-300 hover:-translate-y-1 hover:shadow-lg"
      >
        <h4 class="mb-2 flex items-center text-lg font-semibold text-amber-800">
          <Icon name="mdi:briefcase" class="mr-2 h-5 w-5 text-amber-600" /> Subscription
          plan
        </h4>
        <p class="text-sm leading-relaxed text-amber-700">
          Level up with paid plans offering more resources and features.
        </p>
      </div>
      <div
        class="rounded-lg bg-green-200 p-4 shadow-md transition-all duration-300 hover:-translate-y-1 hover:shadow-lg"
      >
        <h4 class="mb-2 flex items-center text-lg font-semibold text-green-800">
          <Icon name="mdi:scale-balance" class="mr-2 h-5 w-5 text-green-600" /> Usage-based
        </h4>
        <p class="text-sm leading-relaxed text-green-700">
          After your free or subscription resources are used up, you pay only
          for what you use.
        </p>
      </div>
    </div>
  </div>
  {
    Object.keys(pricing?.freeTierLimits ?? {}).map((key) => (
      <div class="overflow-hidden rounded-xl bg-white shadow-lg transition-all duration-300 hover:shadow-xl">
        <div class="p-6">
          <h3 class="mb-4 text-xl font-bold leading-tight text-gray-900">
            {key}
          </h3>
          <div class="grid gap-4 md:grid-cols-3">
            <div class="rounded-lg bg-purple-100 p-4">
              <dt class="mb-1 text-sm font-medium text-purple-800">Free</dt>
              <dd class="text-lg font-semibold tracking-tight text-purple-700">
                {key === "Price" ? (
                  pricing?.freeTierLimits[
                    key as keyof typeof pricing.freeTierLimits
                  ] === null ? (
                    <Icon name="mdi:check" class="h-6 w-6 text-purple-700" />
                  ) : (
                    formatValue(
                      pricing?.freeTierLimits[
                        key as keyof typeof pricing.freeTierLimits
                      ],
                      true,
                    )
                  )
                ) : (
                  (() => {
                    const value =
                      pricing?.freeTierLimits[
                        key as keyof typeof pricing.freeTierLimits
                      ];
                    return value === null
                      ? "-"
                      : `${formatValue(value)} ${getResourceUnit(key)}`;
                  })()
                )}
              </dd>
            </div>
            <div class="rounded-lg bg-amber-100 p-4">
              <dt class="mb-1 text-sm font-medium text-amber-800">
                Subscription
              </dt>
              <dd class="text-lg font-semibold tracking-tight text-amber-700">
                {key === "Price"
                  ? pricing?.pricedTier[
                      key as keyof typeof pricing.pricedTier
                    ] === null
                    ? `${baasProvider.data.name} offers usage-based pricing only`
                    : `${formatValue(pricing?.pricedTier[key as keyof typeof pricing.pricedTier], true)} per month`
                  : (() => {
                      const value =
                        pricing?.pricedTier[
                          key as keyof typeof pricing.pricedTier
                        ];
                      return value === null
                        ? "-"
                        : `${formatValue(value)} ${getResourceUnit(key)}`;
                    })()}
              </dd>
            </div>
            <div class="rounded-lg bg-green-100 p-4">
              <dt class="mb-1 text-sm font-medium text-green-800">
                Usage-based
              </dt>
              <dd class="text-lg font-semibold tracking-tight text-green-700">
                {(() => {
                  const value =
                    pricing?.overagePricing[
                      key as keyof typeof pricing.overagePricing
                    ];
                  if (key === "Price") {
                    return (
                      <Icon name="mdi:check" class="h-6 w-6 text-green-700" />
                    );
                  } else if (value === null) {
                    return "-";
                  } else if (key !== "Note" && value !== "unlimited") {
                    return `${formatValue(value, true)} ${getOveragePricingUnit(key)}`;
                  }
                  return formatValue(value, key !== "Note");
                })()}
              </dd>
            </div>
          </div>
        </div>
      </div>
    ))
  }
</div>
