---
import { Image } from "astro:assets";
import { type CollectionEntry, getCollection } from "astro:content";
import MainLayout from "~/layouts/Layout.astro";
import Accordion from "~/components/Accordion.astro";
import FeatureList from "~/components/BaaS/FeatureList.astro";
import startCase from "lodash/startCase";
import { Icon } from "astro-icon/components";
import Pill from "~/components/Pill.astro";
import PricingCard from "~/components/BaaS/PricingCard.astro";
import CompareCard from "~/components/CompareCard.astro";

export async function getStaticPaths() {
  const baasProviders = await getCollection("baasProvider");
  return baasProviders.map((baas) => ({
    params: { slug: baas.data.slug },
    props: {
      baas,
      otherBaasProviders: baasProviders.filter(
        (b) => b.data.slug !== baas.data.slug,
      ),
    },
  }));
}

type Props = {
  baas: CollectionEntry<"baasProvider">;
  otherBaasProviders: CollectionEntry<"baasProvider">[];
};

const { baas, otherBaasProviders } = Astro.props;
const pageTitle = `${baas.data.name} | Features, Overview, and Pricing`;

function hasEnabledFeatures(details: Record<string, unknown>): boolean {
  return Object.values(details).some((value) => !!value);
}
---

<MainLayout
  {...baas.data}
  title={pageTitle}
  description={baas.data.shortDescription}
>
  <div class="container mx-auto px-4 py-16 sm:px-6 lg:px-8">
    <div class="grid grid-cols-1 gap-12 lg:grid-cols-3">
      <div
        class="flex flex-col items-center space-y-8 lg:sticky lg:top-8 lg:self-start"
      >
        <Image
          decoding="async"
          src={baas.data.logo}
          alt={baas.data.name}
          format="webp"
          loading="eager"
          width={180}
          class="transition-transform duration-300 hover:scale-105"
        />
        <div class="grid grid-cols-2 gap-4 lg:grid-cols-1">
          <a
            target="_blank"
            href={baas.data.website}
            class="flex w-full items-center justify-center gap-2 rounded-full bg-purple-100 px-4 py-2 text-sm font-medium text-purple-700 transition-colors duration-300 hover:bg-purple-200"
          >
            Visit Website
            <Icon name="mdi:external-link" class="size-4" />
          </a>
          {
            baas.data.repository && (
              <a
                target="_blank"
                href={baas.data.repository}
                class="flex w-full items-center justify-center gap-2 rounded-full bg-gray-100 px-4 py-2 text-sm font-medium text-gray-700 transition-colors duration-300 hover:bg-gray-200"
              >
                View Source
                <Icon name="mdi:github" class="size-4" />
              </a>
            )
          }
          <a
            href="#features"
            class="flex w-full items-center justify-center gap-2 rounded-full bg-blue-100 px-4 py-2 text-sm font-medium text-blue-700 transition-colors duration-300 hover:bg-blue-200"
          >
            Features
            <Icon name="mdi:star" class="size-4" />
          </a>
          <a
            href="#pricing"
            class="flex w-full items-center justify-center gap-2 rounded-full bg-green-100 px-4 py-2 text-sm font-medium text-green-700 transition-colors duration-300 hover:bg-green-200"
          >
            Pricing
            <Icon name="mdi:currency-usd" class="size-4" />
          </a>
          <a
            href="#compare"
            class="flex w-full items-center justify-center gap-2 rounded-full bg-orange-100 px-4 py-2 text-sm font-medium text-orange-700 transition-colors duration-300 hover:bg-orange-200"
          >
            Compare
            <Icon name="mdi:compare" class="size-4" />
          </a>
        </div>
      </div>
      <div class="flex flex-col gap-12 lg:col-span-2">
        <div class="flex flex-col gap-4">
          <h1 class="text-4xl font-extrabold text-gray-900 sm:text-5xl">
            {baas.data.name}
          </h1>
          <p class="text-xl leading-relaxed text-gray-600">
            {baas.data.description}
          </p>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-2xl font-semibold text-gray-800">Hosting Options</h2>
          <div class="flex flex-wrap gap-3">
            <Pill
              text="Cloud Hosting"
              type={baas.data.cloudHosted ? "success" : "empty"}
            />
            <Pill
              text="Self Hosting"
              type={baas.data.selfHosted ? "success" : "empty"}
            />
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-2xl font-semibold text-gray-800">Official SDKs</h2>
          <div class="flex flex-wrap gap-3">
            {baas.data.sdks.map((sdk) => <Pill text={sdk} />)}
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-2xl font-semibold text-gray-800">Unique Features</h2>
          <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
            {
              baas.data.uniqueFeatures.map((feature) => (
                <li class="flex items-start space-x-3 rounded-lg bg-purple-100 p-4 transition-all hover:scale-105">
                  <Icon
                    name="mdi:star"
                    class="mt-1 h-5 w-5 flex-shrink-0 text-purple-500"
                  />
                  <span class="text-base leading-relaxed text-purple-900">
                    {feature}
                  </span>
                </li>
              ))
            }
          </ul>
        </div>
        <div id="features" class="flex flex-col gap-4">
          <h2 class="text-2xl font-semibold text-gray-800">Features</h2>
          <div class="flex flex-col gap-8 md:flex-row">
            <div class="flex flex-1 flex-col gap-6">
              {
                Object.entries(baas.data.features)
                  .slice(
                    0,
                    Math.ceil(Object.entries(baas.data.features).length / 2),
                  )
                  .map(([feature, details]) => (
                    <Accordion
                      key={feature}
                      canOpen={hasEnabledFeatures(details)}
                    >
                      <slot slot="title">
                        <Icon
                          name={
                            hasEnabledFeatures(details)
                              ? "mdi:check-circle"
                              : "mdi:close-circle"
                          }
                          class={`mr-2 inline-block ${
                            hasEnabledFeatures(details)
                              ? "text-green-500"
                              : "text-red-500"
                          }`}
                        />
                        <span>{startCase(feature)}</span>
                      </slot>
                      <FeatureList features={details} />
                    </Accordion>
                  ))
              }
            </div>
            <div class="flex flex-1 flex-col gap-6">
              {
                Object.entries(baas.data.features)
                  .slice(
                    Math.ceil(Object.entries(baas.data.features).length / 2),
                  )
                  .map(([feature, details]) => (
                    <Accordion
                      key={feature}
                      canOpen={hasEnabledFeatures(details)}
                    >
                      <slot slot="title">
                        <Icon
                          name={
                            hasEnabledFeatures(details)
                              ? "mdi:check-circle"
                              : "mdi:close-circle"
                          }
                          class={`mr-2 inline-block ${
                            hasEnabledFeatures(details)
                              ? "text-green-500"
                              : "text-red-500"
                          }`}
                        />
                        <span>{startCase(feature)}</span>
                      </slot>
                      <FeatureList features={details} />
                    </Accordion>
                  ))
              }
            </div>
          </div>
        </div>
        <div id="pricing" class="flex flex-col gap-4">
          <h2 class="text-2xl font-semibold text-gray-800">Pricing</h2>
          <div class="space-y-8">
            {
              baas.data.cloudHosted ? (
                <PricingCard baasProvider={baas} />
              ) : (
                <p class="text-lg text-gray-600">
                  This provider does not currently offer cloud hosting. Please
                  check their website for self-hosting options and pricing
                  details.
                </p>
              )
            }
          </div>
        </div>
        <div
          id="compare"
          class="flex flex-col gap-6 rounded-xl bg-gradient-to-br from-purple-100 to-indigo-100 p-8 shadow-lg"
        >
          <h2 class="text-2xl font-semibold text-gray-700">
            Compare <span class="text-purple-700">{baas.data.name}</span> with Other
            Providers
          </h2>
          <p class="mb-4 text-lg text-gray-700">
            Explore how {baas.data.name} stacks up against other Backend as a Service
            solutions.
          </p>
          <div class="grid gap-6 md:grid-cols-2 xl:grid-cols-3">
            {
              otherBaasProviders.map((otherBaas) => (
                <CompareCard
                  item={baas}
                  otherItem={otherBaas}
                  type="baasProvider"
                />
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
