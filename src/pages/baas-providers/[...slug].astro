---
import { Image } from "astro:assets";
import { type CollectionEntry, getCollection } from "astro:content";
import MainLayout from "~/layouts/Layout.astro";
import Accordion from "~/components/Accordion.astro";
import FeatureList from "~/components/FeatureList.astro";
import startCase from "lodash/startCase";
import { Icon } from "astro-icon/components";
import Pill from "~/components/Pill.astro";
import { cn } from "~/lib/cn";

export async function getStaticPaths() {
  const baasProviders = await getCollection("baasProvider");
  return baasProviders.map((baas) => ({
    params: { slug: baas.data.slug },
    props: baas,
  }));
}
type Props = CollectionEntry<"baasProvider">;

const baasProvider = Astro.props;
const pageTitle = baasProvider.data.name + " | Features, overview, and pricing";

function hasEnabledFeatures(details: Record<string, unknown>): boolean {
  return Object.values(details).some((value) => !!value);
}
---

<MainLayout {...baasProvider.data} title={pageTitle}>
  <div class="container mx-auto px-4 py-12">
    <div class="grid grid-cols-1 gap-12 md:grid-cols-3">
      <div class="flex flex-col items-center gap-y-3">
        <Image
          src={baasProvider.data.logo}
          alt={baasProvider.data.name}
          format="webp"
          loading="eager"
          width={200}
          class="mb-6"
        />
        <a
          target="_blank"
          href={baasProvider.data.website}
          class="flex items-center gap-2 text-lg text-purple-600 transition-colors duration-300 hover:text-purple-800 hover:underline"
        >
          Website
          <Icon name="mdi:external-link" class="size-5" />
        </a>
        {
          baasProvider.data.repository && (
            <a
              target="_blank"
              href={baasProvider.data.repository}
              class="flex items-center gap-2 text-lg text-purple-600 transition-colors duration-300 hover:text-purple-800 hover:underline"
            >
              Open source
              <Icon name="mdi:github" class="size-5" />
            </a>
          )
        }
      </div>
      <div class="md:col-span-2">
        <h1 class="mb-6 text-4xl font-bold text-gray-800">
          {baasProvider.data.name}
        </h1>
        <p class="mb-8 text-xl leading-relaxed text-gray-600">
          {baasProvider.data.description}
        </p>
        <h2 class="mb-4 text-2xl font-semibold text-gray-700">Hosting</h2>
        <div class="mb-8 flex flex-wrap gap-2">
          <Pill
            text="Cloud Hosting"
            type={baasProvider.data.cloudHosted ? "success" : "empty"}
          />
          <Pill
            text="Self Hosting"
            type={baasProvider.data.selfHosted ? "success" : "empty"}
          />
        </div>
        <h2 class="mb-4 text-2xl font-semibold text-gray-700">Official SDKs</h2>
        <div class="mb-8 flex flex-wrap gap-2">
          {baasProvider.data.sdks.map((sdk) => <Pill text={sdk} />)}
        </div>
        <h2 class="mb-4 text-2xl font-semibold text-gray-700">Features</h2>
        <div class="flex w-full flex-col gap-4 md:flex-row">
          <div class="flex flex-1 flex-col gap-4">
            {
              Object.entries(baasProvider.data.features)
                .slice(
                  0,
                  Math.ceil(
                    Object.entries(baasProvider.data.features).length / 2,
                  ),
                )
                .map(([feature, details]) => (
                  <Accordion
                    key={feature}
                    canOpen={hasEnabledFeatures(details)}
                  >
                    <slot slot="title">
                      <Icon
                        name={
                          hasEnabledFeatures(details)
                            ? "mdi:check-circle"
                            : "mdi:close-circle"
                        }
                        class={`mr-2 inline-block ${hasEnabledFeatures(details) ? "text-green-500" : "text-red-500"}`}
                      />
                      <span>{startCase(feature)}</span>
                    </slot>
                    <FeatureList features={details} />
                  </Accordion>
                ))
            }
          </div>
          <div class="flex flex-1 flex-col gap-4">
            {
              Object.entries(baasProvider.data.features)
                .slice(
                  Math.ceil(
                    Object.entries(baasProvider.data.features).length / 2,
                  ),
                )
                .map(([feature, details]) => (
                  <Accordion
                    key={feature}
                    canOpen={hasEnabledFeatures(details)}
                  >
                    <slot slot="title">
                      <Icon
                        name={
                          hasEnabledFeatures(details)
                            ? "mdi:check-circle"
                            : "mdi:close-circle"
                        }
                        class={`mr-2 inline-block ${hasEnabledFeatures(details) ? "text-green-500" : "text-red-500"}`}
                      />
                      <span>{startCase(feature)}</span>
                    </slot>
                    <FeatureList features={details} />
                  </Accordion>
                ))
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
