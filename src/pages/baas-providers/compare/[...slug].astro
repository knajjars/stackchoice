---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import MainLayout from "~/layouts/Layout.astro";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import startCase from "lodash/startCase";
import Pill from "~/components/Pill.astro";
import {
  formatValue,
  getResourceUnit,
  getOveragePricingUnit,
} from "~/lib/utils";

export async function getStaticPaths() {
  const baasProviders = await getCollection("baasProvider");

  return baasProviders.flatMap((baasProvider1) =>
    baasProviders
      .filter(
        (baasProvider2) => baasProvider1.data.slug !== baasProvider2.data.slug,
      )
      .map((baasProvider2) => ({
        params: {
          slug: `${baasProvider1.data.slug}-vs-${baasProvider2.data.slug}`,
        },
        props: { baasProvider1, baasProvider2 },
      })),
  );
}

type Props = {
  baasProvider1: CollectionEntry<"baasProvider">;
  baasProvider2: CollectionEntry<"baasProvider">;
};

const { baasProvider1, baasProvider2 } = Astro.props as Props;
const pageTitle = `${baasProvider1.data.name} vs ${baasProvider2.data.name} | Comparison`;
const pageDescription = `Compare ${baasProvider1.data.name} and ${baasProvider2.data.name} to find the best Backend as a Service (BaaS) provider for your needs.`;

const featureSets = Object.keys(baasProvider1.data.features);
const pricingCategories = Object.keys(baasProvider1.data.pricing ?? {});

function checkFeature<
  K extends keyof CollectionEntry<"baasProvider">["data"]["features"],
  F extends keyof CollectionEntry<"baasProvider">["data"]["features"][K],
>(
  providerFeatureSet: CollectionEntry<"baasProvider">["data"]["features"],
  featureSet: K,
  feature: F,
) {
  return providerFeatureSet[featureSet][feature] as boolean | null;
}

const pricingDescriptions = {
  freeTierLimits: "Free resources provided each month without any cost.",
  pricedTier: "Paid plans offering increased resources and features.",
  overagePricing: "Costs for usage beyond free or subscription limits.",
};
---

<MainLayout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 py-16 sm:px-6 lg:px-8">
    <h1
      class="mb-6 text-center text-4xl font-extrabold text-purple-900 sm:text-5xl"
    >
      <span class="text-purple-600">{baasProvider1.data.name}</span> vs <span
        class="text-purple-600">{baasProvider2.data.name}</span
      >
    </h1>
    <p class="mb-12 text-center text-xl text-gray-700">
      {pageDescription}
    </p>

    <div class="grid gap-8 lg:grid-cols-2">
      {
        [baasProvider1, baasProvider2].map((provider) => (
          <div class="group rounded-2xl bg-white p-6 shadow-lg">
            <div class="mb-6 flex flex-col items-center justify-between gap-3 lg:flex-row">
              <Image
                src={provider.data.logo}
                alt={provider.data.name}
                width={100}
                height={100}
                loading="eager"
                class="object-contain transition-transform duration-300 group-hover:scale-105"
              />
              <div class="flex gap-2">
                <Pill
                  text="Cloud Hosting"
                  type={provider.data.cloudHosted ? "success" : "empty"}
                />
                <Pill
                  text="Self Hosting"
                  type={provider.data.selfHosted ? "success" : "empty"}
                />
              </div>
            </div>
            <h2 class="mb-3 text-2xl font-bold text-gray-900 transition-colors duration-300 group-hover:text-purple-600">
              {provider.data.name}
            </h2>
            <p class="mb-4 text-gray-600 transition-colors duration-300 group-hover:text-gray-800">
              {provider.data.shortDescription}
            </p>
            <h3 class="mb-3 text-lg font-semibold text-purple-900">
              Unique Features
            </h3>
            <ul class="mb-6 space-y-2">
              {provider.data.uniqueFeatures.map((feature) => (
                <li class="flex items-start">
                  <Icon
                    name="mdi:star"
                    class="mr-2 mt-1 h-4 w-4 flex-shrink-0 text-yellow-500"
                  />
                  <span class="text-sm text-gray-700">{feature}</span>
                </li>
              ))}
            </ul>
            <div class="flex items-end justify-start gap-3">
              <a
                href={`/baas-providers/${provider.data.slug}`}
                class="inline-flex items-center gap-1 rounded-md bg-purple-600 px-4 py-2 text-sm font-medium text-white transition-colors duration-300 hover:bg-purple-700"
              >
                Details
                <Icon name="mdi:arrow-right" class="size-4" />
              </a>
              <a
                href={provider.data.website}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-1 rounded-md bg-gray-200 px-4 py-2 text-sm font-medium text-gray-800 transition-colors duration-300 hover:bg-gray-300"
              >
                Website
                <Icon name="mdi:external-link" class="size-4" />
              </a>
            </div>
          </div>
        ))
      }
    </div>

    <div class="mt-12 flex justify-center gap-4">
      <a
        href="#comparison"
        class="inline-flex items-center gap-2 rounded-md bg-purple-600 px-5 py-2 text-base font-medium text-white transition-colors duration-300 hover:bg-purple-700"
      >
        Compare Features
        <Icon name="mdi:star" class="size-5" />
      </a>
      <a
        href="#pricing"
        class="inline-flex items-center gap-2 rounded-md bg-green-600 px-5 py-2 text-base font-medium text-white transition-colors duration-300 hover:bg-green-700"
      >
        Compare Pricing
        <Icon name="mdi:currency-usd" class="size-5" />
      </a>
    </div>
  </div>

  <div class="container mx-auto px-4 py-20 sm:px-6 lg:px-8" id="comparison">
    <h2 class="mb-12 text-center text-4xl font-bold text-purple-900">
      Feature Comparison
    </h2>
    <div class="space-y-16">
      {
        featureSets.map((featureSet) => (
          <div class="overflow-hidden rounded-2xl bg-white shadow-xl transition-all duration-300 hover:shadow-2xl">
            <h3 class="bg-purple-100 p-6 text-3xl font-bold text-purple-900">
              {startCase(featureSet)}
            </h3>
            <div class="overflow-x-auto">
              <table class="w-full border-collapse">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="w-1/3 border-b p-4 text-left text-base font-semibold text-gray-900">
                      Feature
                    </th>
                    <th class="w-1/3 border-b p-4 text-left text-base font-semibold text-gray-900">
                      {baasProvider1.data.name}
                    </th>
                    <th class="w-1/3 border-b p-4 text-left text-base font-semibold text-gray-900">
                      {baasProvider2.data.name}
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {Object.keys(
                    baasProvider1.data.features[
                      featureSet as keyof typeof baasProvider1.data.features
                    ],
                  ).map((feature, index) => (
                    <tr class={index % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                      <td class="w-1/3 border-b p-4 text-base font-medium text-gray-900">
                        {startCase(feature)}
                      </td>
                      {[baasProvider1, baasProvider2].map((provider) => (
                        <td class="w-1/3 border-b p-4">
                          {(() => {
                            const value = checkFeature(
                              provider.data.features,
                              featureSet as any,
                              feature as any,
                            );
                            if (typeof value === "boolean") {
                              return value ? (
                                <Icon
                                  name="mdi:check-circle"
                                  class="h-6 w-6 text-green-500"
                                />
                              ) : (
                                <Icon
                                  name="mdi:close-circle"
                                  class="h-6 w-6 text-red-500"
                                />
                              );
                            }
                            return (
                              <span class="text-base text-gray-700">
                                {value ?? "-"}
                              </span>
                            );
                          })()}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <div class="container mx-auto px-4 py-20 sm:px-6 lg:px-8" id="pricing">
    <h2 class="mb-12 text-center text-4xl font-bold text-purple-900">
      Pricing Comparison
    </h2>
    <div class="space-y-16">
      {
        pricingCategories.map((category) => (
          <div class="overflow-hidden rounded-2xl bg-white shadow-xl transition-all duration-300 hover:shadow-2xl">
            <h3 class="bg-purple-100 p-6 text-3xl font-bold text-purple-900">
              {startCase(category)}
            </h3>
            <p class="bg-purple-50 p-4 text-base text-purple-700">
              {
                pricingDescriptions[
                  category as keyof typeof pricingDescriptions
                ]
              }
            </p>
            <div class="overflow-x-auto">
              <table class="w-full border-collapse">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="w-1/3 border-b p-4 text-left text-base font-semibold text-gray-900">
                      Resource
                    </th>
                    <th class="w-1/3 border-b p-4 text-left text-base font-semibold text-gray-900">
                      {baasProvider1.data.name}
                    </th>
                    <th class="w-1/3 border-b p-4 text-left text-base font-semibold text-gray-900">
                      {baasProvider2.data.name}
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {Object.keys(
                    baasProvider1.data.pricing?.[
                      category as keyof typeof baasProvider1.data.pricing
                    ] ?? {},
                  )
                    .filter(
                      (resource) =>
                        !(
                          category === "freeTierLimits" && resource === "Price"
                        ),
                    )
                    .map((resource, index) => (
                      <tr class={index % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                        <td class="w-1/3 border-b p-4 text-base font-medium text-gray-900">
                          {startCase(resource)}
                        </td>
                        {[baasProvider1, baasProvider2].map((provider) => (
                          <td class="w-1/3 border-b p-4 text-base text-gray-700">
                            {(() => {
                              const value =
                                provider.data.pricing?.[
                                  category as keyof typeof baasProvider1.data.pricing
                                ]?.[resource];
                              return (
                                formatValue(
                                  value,
                                  resource === "Price" ||
                                    category === "overagePricing",
                                ) +
                                " " +
                                (category === "overagePricing" && value
                                  ? getOveragePricingUnit(resource)
                                  : value
                                    ? getResourceUnit(resource)
                                    : "")
                              ).trim();
                            })()}
                          </td>
                        ))}
                      </tr>
                    ))}
                </tbody>
              </table>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</MainLayout>
